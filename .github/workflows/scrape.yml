name: Relay Giveaways

on:
  schedule:
    - cron: "*/15 * * * *"   # corre cada 15 min
  workflow_dispatch: {}       # permitir correr a mano

permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      # Checkout con historial completo (necesario para pull --rebase)
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      # (opcional) cachea los browsers de Playwright para acelerar
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-pw-1.47.0

      - name: Instalar Playwright
        run: |
          npm init -y
          npm i playwright@1.47.0
          npx playwright install --with-deps chromium

      - name: Ejecutar scraper
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          SHEET_CSV_URL: ${{ vars.SHEET_CSV_URL }}
          SOURCES_TXT_URL: ${{ vars.SOURCES_TXT_URL }}
          KEYWORDS: ${{ vars.KEYWORDS }}
          MENTION_ROLE_ID: ${{ vars.MENTION_ROLE_ID }}
          SEED_ON_EMPTY: ${{ vars.SEED_ON_EMPTY }}   # poné "false" para publicar en la 1ª corrida
        run: node scraper.js

      # (opcional) limpia artefactos de npm para no “ensuciar” el repo
      - name: Limpiar archivos temporales de npm
        run: rm -rf node_modules package.json package-lock.json

      # Commit robusto del estado: hace pull --rebase antes de pushear
      - name: Commit del estado si cambió
        env:
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          if ! git diff --quiet -- state.json; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

            # Traer últimos cambios y rebase para evitar non-fast-forward
            git fetch origin "$BRANCH_NAME"
            git checkout "$BRANCH_NAME"
            if ! git pull --rebase origin "$BRANCH_NAME"; then
              git rebase --abort || true
              git reset --hard "origin/$BRANCH_NAME"
            fi

            git add state.json
            git commit -m "update state [skip ci]" || echo "Nada que commitear"
            git push origin HEAD:"$BRANCH_NAME"
          else
            echo "Sin cambios en state.json"
          fi
